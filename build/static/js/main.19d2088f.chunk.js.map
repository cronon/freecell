{"version":3,"sources":["state/card.ts","state/foundation.ts","utils/msrand.ts","state/column.ts","state/board.ts","state/game.ts","components/menu.tsx","components/card.tsx","components/board.tsx","components/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["suits","lt","card1","card2","suitToColor","suit","sameColor","rank","Error","suitToPic","rankToLetter","number","canPlaceFoundation","card","foundation","lastCard","last","MSRand","seed","state","this","movableStack","column","overCard","bigStack","length","result","i","current","unshift","arrangedStack","biggestMovableIndex","findIndex","c","slice","generateDeck","l","fourColumns","map","Array","fill","_","position","includes","id","toUpperCase","selected","createCard","stack","x","y","thirteenRows","zip","array","flatten","cards","rnd","rand","newCard","pop","push","Board","turns","planCards","allCards","observable","commitState","selectCard","bind","moveToFreePlace","filter","find","sort","c1","c2","reduce","selectedCard","columns","col","selectedColumn","autoMoveCards","concat","freeplaces","canPlace","flat","clubs","diamonds","hearts","spades","cardInFoundation","canAutoMoveFoundation","setTimeout","forEach","_moveToFoundation","finishMove","lastTurn","suitableColumn","canPlaceColumns","freeIndex","f","moveToColumn","moveToFoundation","index","toMove","movingCard","computed","game","newGame","Math","random","board","window","GAME","Menu","observer","input","useRef","className","onSubmit","e","preventDefault","value","Number","type","ref","max","min","onClick","rollback","CardComponent","onSelect","onDoubleClick","useState","zIndex","setZIndex","style","onMouseDown","button","stopPropagation","document","body","addEventListener","onMouseUp","onContextMenu","removeEventListener","BoardComponent","FreePlace","key","Foundation","Column","cardsUnder","canPlaceCls","tryToMove","GameComponent","useEffect","ctrlZ","autorun","title","ctrlKey","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19d2088f.chunk.js","sourcesContent":["export type Suit = 'spades' | 'hearts' | 'clubs' | 'diamonds';\nexport const suits = ['spades', 'hearts', 'clubs', 'diamonds'] as Suit[];\nexport type Rank = 0|1|2|3|4|5|6|7|8|9|10|11|12|13;\n\nexport type Stack = 'freeplace' | 'columns' | 'foundation';\nexport interface Position {\n    stack: Stack;\n    x: number;\n    y: number;\n}\nexport interface Card {\n    suit: Suit;\n    rank: Rank;\n    id: string;\n    selected: boolean;\n    position: Position;\n}\n\nexport function createCard({suit, rank, position}: {suit: string, rank: number, position: Position}): Card{\n    if (rank < 0 || 13 < rank) {\n        throw new Error('Wrong rank ' + rank)\n    }\n    if (!suit.includes(suit)) {\n        throw new Error('Wrong suit ' + suit)\n    }\n    return {\n        suit, rank,\n        id: rankToLetter(rank) + suit[0].toUpperCase(),\n        selected: false,\n        position\n    } as any;\n}\n\nexport function lt(card1: Card, card2: Card): boolean {\n    return !sameColor(card1, card2) && card1.rank + 1 === card2.rank\n}\nexport function sameColor(card1: Card, card2: Card) {\n    return suitToColor(card1.suit) === suitToColor(card2.suit);\n}\nexport function suitToColor(suit: Suit): string {\n    switch(suit) {\n        case 'diamonds':\n        case 'hearts': return 'red';\n        case 'spades':\n        case 'clubs': return 'black';\n        default: throw new Error('Unrecognized suit')\n    }\n}\n\nexport function suitToPic(suit: Suit): string {\n    switch(suit) {\n        case 'clubs': return '♣';\n        case 'diamonds': return '♦';\n        case 'hearts': return '♥';\n        case 'spades': return '♠';\n        default: throw new Error('Unrecognized suit')\n    }\n}\n\nexport function rankToLetter(number: number): string {\n    if (number < 0) {\n        throw new Error('No rank less 0')\n    } else if (number === 0) {\n        return '';\n    } else if (number > 13) {\n        throw new Error('No rank gt 13');\n    } else {\n        return [\n            'A',\n            '2','3','4','5','6','7','8','9','10',\n            'J', 'Q', 'K'\n        ][number - 1]\n    }\n}\n","import {Suit, Card, lt} from './card';\nimport { last } from 'lodash';\nexport type Foundation = {\n    [s in Suit]: Card[];\n};\nexport function canPlaceFoundation(card: Card, foundation: Foundation): boolean {\n    const suit = card.suit;\n    const lastCard = last(foundation[suit]);\n    return lastCard\n        ? lastCard.rank + 1 === card.rank\n        : card.rank === 1;\n}\nexport function canAutoMoveFoundation(card: Card, foundation: Foundation): boolean {\n    if (card.rank === 1) {\n        return foundation[card.suit].length === 0;\n    } else {\n        const canPlace = canPlaceFoundation(card, foundation);\n        const flat = [...foundation.clubs, ...foundation.diamonds, ...foundation.hearts, ...foundation.spades];\n        return canPlace && flat.filter(cardInFoundation => {\n            return lt(cardInFoundation, card)\n        }).length === 2;\n        // A black 2 can be auto moved when two red aces are there\n        // that is there is no other card that can be placed on the black 2\n    }\n}\n","// https://rosettacode.org/wiki/Deal_cards_for_FreeCell#JavaScript\nexport class MSRand {\n    private state: number;\n    constructor(private seed: number) {\n        this.state = seed;\n    }\n    rand(): number {\n        this.state = (this.state * 214013 + 2531011) & 0x7FFFFFFF\n        return (this.state >> 16) & 0x7fff;\n    }\n}\n","import {Card, lt, createCard} from './card';\nimport {MSRand} from '../utils';\nimport {last, zip, flatten} from 'lodash';\n\nexport function arrangedStack(column: Card[]): Card[] {\n    if (column.length === 0) {\n        return [];\n    } else {\n        const result: Card[] = [last(column)] as any;\n        for(let i = column.length-2; i>=0; i--) {\n            const current = column[i];\n            if (lt(result[0], current)) {\n                result.unshift(current);\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n}\nexport function movableStack(column: Card[], overCard: Card | null): Card[] {\n    const bigStack = arrangedStack(column);\n    if (overCard === null) {\n        return bigStack;\n    } else {\n        const biggestMovableIndex = bigStack.findIndex(c => lt(c, overCard));\n        if (biggestMovableIndex === -1) return [];\n        return bigStack.slice(biggestMovableIndex);\n    }\n\n}\n\n// https://rosettacode.org/wiki/Deal_cards_for_FreeCell\nexport function generateDeck(seed: number): Card[] {\n    const fourColumns = ['clubs', 'diamonds', 'hearts', 'spades'].map((suit) => {\n        return Array(13).fill({}).map((_, i) => createCard({\n                suit,\n                rank: i+1,\n                position: {\n                    stack: 'columns',\n                    x: 0, y: 0\n                }\n            }))\n    });\n    const thirteenRows: Card[][] = zip(...fourColumns) as any;\n    const array = flatten(thirteenRows);\n    const cards: Card[] = [];\n\n    const rnd = new MSRand(seed);\n    let i: number;\n    let l: number;\n    while(array.length) {\n        if (seed !== -1) {\n            i = rnd.rand() % array.length;\n            l = array.length-1;\n            [array[i], array[l]] = [array[l], array[i]];\n        }\n        const newCard = array.pop() as Card;\n        newCard.position.x = cards.length % 8;\n        newCard.position.y = cards.length / 8 |0;\n        cards.push(newCard)\n    }\n    return cards;\n}\n","import {observable, computed} from 'mobx';\nimport {Card, suits, lt, Suit} from './card';\nimport {Foundation, canPlaceFoundation, canAutoMoveFoundation} from './foundation';\nimport {movableStack, generateDeck} from './column';\nimport {stateToStr} from '../utils';\nimport { last } from 'lodash';\n\nexport class Board {\n    turns: Card[][] = [];\n\n    @observable\n    allCards: Card[] = [];\n\n    @computed\n    get freeplaces() {\n        const cards = this.allCards.filter(c => c.position.stack === 'freeplace')\n        return [\n           cards.find(c => c.position.x === 0) || null,\n           cards.find(c => c.position.x === 1) || null,\n           cards.find(c => c.position.x === 2) || null,\n           cards.find(c => c.position.x === 3) || null,\n        ]\n    }\n\n    @computed\n    get columns() {\n        return Array(8).fill([]).map((_, x) => {\n            return this.allCards.filter(c => {\n                return c.position.stack === 'columns' && c.position.x === x\n            }).sort((c1,c2) => c1.position.y - c2.position.y)\n        })\n    }\n\n    @computed\n    get foundation(): Foundation {\n        return suits.reduce((cards: any, suit) => {\n            cards[suit] = this.allCards.filter(c => {\n                return c.position.stack === 'foundation' && c.suit === suit;\n            }) as Card[];\n            cards[suit].sort((c1: any, c2: any) => c1.rank - c2.rank);\n            return cards;\n        }, {})\n    }\n\n    @computed\n    get selectedCard() {\n        return this.allCards.find(c => c.selected) || null;\n    }\n\n    @computed\n    get selectedColumn() {\n        return this.selectedCard &&\n            this.selectedCard.position.stack === 'columns'\n            ? this.columns[this.selectedCard.position.x]\n            : null;\n    }\n    @computed\n    get canPlaceColumns() {\n        const selectedCard = this.selectedCard;\n        const r = this.columns.map((col, i) => {\n            if (selectedCard == null) return false;\n            if (col.length === 0) return true; // TODO add calculation of free spaces\n\n            const lastCard = col[col.length-1];\n            if (selectedCard.position.stack === 'freeplace' || selectedCard.position.stack === 'foundation') {\n                return lt(selectedCard, lastCard);\n            } else {\n                const selectedColumn = this.selectedColumn!;\n                const stack = movableStack(selectedColumn, lastCard);\n                return !!stack.length;\n            }\n        });\n        return r;\n    }\n    @computed\n    get canPlaceFoundation(): {[i in Suit]: boolean} {\n        const selectedCard = this.selectedCard;\n        return suits.reduce((suits, suit) => {\n            suits[suit] = false;\n            if (selectedCard) {\n                suits[suit] = canPlaceFoundation(selectedCard, this.foundation) && selectedCard.suit === suit\n            }\n            return suits;\n        }, {} as any)\n    }\n\n    constructor(private seed: number) {\n        const planCards = generateDeck(this.seed);\n        this.allCards = planCards.map(c => {\n            // intercept(card, function(change){ console.log(change); return change })\n            return observable(c)\n        });\n        this.commitState();\n        this.selectCard = this.selectCard.bind(this);\n        this.moveToFreePlace = this.moveToFreePlace.bind(this);\n    }\n    finishMove(){\n        const autoMoveCards = this.columns.map(col => last(col))\n            .concat(...this.freeplaces as any)\n            .filter(c => !!c)\n            .filter((c: any) => canAutoMoveFoundation(c, this.foundation)) as Card[];\n        if (autoMoveCards.length) {\n            setTimeout(() => {\n                this.commitState();\n                autoMoveCards.forEach(c => this._moveToFoundation(c));\n                this.finishMove();\n            }, 300)\n        }\n    }\n    commitState(){\n        this.turns.push(this.allCards.map((card: any) => ({\n            ...card,\n            position: {...card.position}\n        })));\n        // console.log('committed', this.turns.length, stateToStr(this.allCards))\n    }\n    rollback(){\n        if (this.turns.length) {\n            const lastTurn = this.turns.pop();\n            this.allCards = lastTurn as any;\n            // console.log('rolledback', this.turns.length+1, stateToStr(this.allCards))\n        }\n    }\n    selectCard(card: Card) {\n        if (this.selectedCard === card) {\n            card.selected = false;\n        } else if (this.selectedCard != null) {\n            this.selectedCard.selected = false;\n            card.selected = true;\n        } else {\n            card.selected = true;\n        }\n    }\n    moveToFreePlace(i: number) {\n        if (this.selectedCard && this.freeplaces[i] === null) {\n            this.commitState();\n            this.selectedCard.position = {\n                stack: 'freeplace',\n                x: i, y: 0\n            }\n            this.selectedCard.selected = false;\n            this.finishMove();\n        }\n    }\n    tryToMove(card: Card) {\n        this.selectedCard && (this.selectedCard.selected = false);\n        card.selected = true;\n\n        const suitableColumn = this.canPlaceColumns.findIndex(c => !!c);\n        const freeIndex = this.freeplaces.findIndex(f => f === null);\n        if (suitableColumn !== -1) {\n            this.moveToColumn(suitableColumn);\n        } else if (freeIndex !== -1 && card.position.stack !== 'freeplace') {\n            this.moveToFreePlace(freeIndex);\n        } else if (this.canPlaceFoundation[card.suit]) {\n            this.moveToFoundation(card.suit);\n        }\n    }\n    moveToColumn(index: number) {\n        const {selectedCard, selectedColumn} = this;\n        if (!selectedCard) return;\n\n        let toMove = [] as Card[];\n        const lastCard = last(this.columns[index]) || null;\n        if (selectedColumn) {\n            toMove = movableStack(selectedColumn, lastCard);\n        } else {\n            toMove = [selectedCard];\n        }\n        this.commitState();\n        toMove.forEach((movingCard, i) => {\n            movingCard.position = {\n                stack: 'columns',\n                x: index,\n                y: lastCard ? lastCard.position.y + 1 + i : i\n            }\n        })\n        selectedCard.selected = false;\n        this.finishMove();\n    }\n    _moveToFoundation(card: Card) {\n        if (canPlaceFoundation(card, this.foundation)) {\n            card.position = {\n                stack: 'foundation',\n                y: this.foundation[card.suit].length,\n                x: 0\n            }\n        }\n    }\n    moveToFoundation(suit: Suit) {\n        const selectedCard = this.selectedCard;\n        if (selectedCard && selectedCard.suit === suit && selectedCard.position.stack !== 'foundation') {\n            this.commitState();\n            this._moveToFoundation(selectedCard);\n            selectedCard.selected = false;\n            this.finishMove();\n        }\n    }\n}\n","import {observable} from 'mobx';\nimport {Board} from './board';\n\nexport class Game {\n    @observable\n    board: Board = null as any; // no ts, it is assinged in ctor\n    @observable\n    score: number = 0;\n    @observable\n    seed = 1;\n    constructor(){\n        this.newGame(0);\n    }\n    newGame(seed: number) {\n        if (seed === 0 || seed < -1 || seed > 32000) {\n            this.seed = Math.random()*32000 |0;\n        } else {\n            this.seed = seed;\n        }\n        this.board = new Board(this.seed);\n    }\n}\n\nexport const game = new Game();\n(window as any).GAME = game;\n","import React, { useRef } from 'react';\nimport {game} from '../state';\nimport './menu.css';\nimport { observer } from 'mobx-react-lite';\n\nexport const Menu = observer(() => {\n    const input = useRef<HTMLInputElement>(null);\n    return <>\n    <header className=\"header\">\n        <form className=\"left\" onSubmit={onNewGame}>\n            <button type=\"submit\">New game</button>\n            <label className=\"seed-label\">\n                Seed #\n                <input ref={input} className=\"seed-input\" type=\"number\" max=\"32000\" min=\"-1\" />\n            </label>\n        </form>\n\n        <div className=\"right\">\n            <button onClick={() => game.board.rollback()}>Undo</button>\n        </div>\n    </header>\n    <div className=\"center\">\n        <h1 className=\"heading\">Freecell - Game #{game.seed}</h1>\n    </div>\n    </>\n\n    function onNewGame(e: React.FormEvent) {\n        e.preventDefault();\n        const value = input && input.current ? input.current.value : '0';\n        game.newGame(Number(value))\n    }\n})\n\n","import React, { useState } from 'react';\nimport './card.css';\nimport { Card, rankToLetter, suitToColor, suitToPic } from '../state/card';\nimport { observer } from 'mobx-react';\n\nexport interface CardComponentProps {\n    card: Card;\n    onSelect?: (card: Card) => void;\n    onDoubleClick?: () => void;\n}\nexport const CardComponent = observer(({card, onSelect, onDoubleClick}: CardComponentProps) => {\n    const [zIndex, setZIndex] = useState<string>('');\n    const style = zIndex ? {zIndex} : {} as any;\n    const selected = card.selected ? 'card-selected' : '';\n    return <div style={style} className={`card card-${suitToColor(card.suit)} ${selected}`}\n            onClick={() => onSelect && onSelect(card)}\n            onMouseDown={onMouseDown} onContextMenu={e => e.preventDefault()} onDoubleClick={onDoubleClick}\n            >\n            <div className=\"card-header\">\n                <span className=\"card-suit\">{suitToPic(card.suit)}</span>\n                <span className=\"card-rank\">{rankToLetter(card.rank)}</span>\n            </div>\n            <div className=\"card-center\">\n                <span className=\"card-suit\">{suitToPic(card.suit)}</span>\n                <span className=\"card-rank\">{rankToLetter(card.rank)}</span>\n            </div>\n            <div className=\"card-footer\">\n                <span className=\"card-suit\">{suitToPic(card.suit)}</span>\n                <span className=\"card-rank\">{rankToLetter(card.rank)}</span>\n            </div>\n        </div>\n    function onMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        if (e.button === 2) {\n            e.preventDefault();\n            e.stopPropagation();\n            setZIndex('55');\n            document.body.addEventListener('mouseup', onMouseUp)\n        }\n    }\n    function onMouseUp(e: MouseEvent) {\n        if (e.button === 2) {\n            setZIndex('');\n            document.body.removeEventListener('mouseup', onMouseUp);\n        }\n    }\n})\n\n\n\n","import './board.scss';\nimport {CardComponent} from './card';\nimport { suits, Suit, suitToPic, suitToColor } from '../state/card';\nimport React from 'react';\nimport { game } from '../state';\nimport {observer} from'mobx-react';\nimport { last } from 'lodash';\n\nexport const BoardComponent = observer(() => {\n    const board = game.board;\n    return <div className=\"board\">\n        <div className=\"free-places\">\n            <FreePlace key={0} i={0} />\n            <FreePlace key={1} i={1} />\n            <FreePlace key={2} i={2} />\n            <FreePlace key={3} i={3} />\n        </div>\n        <div className=\"foundation-row\">\n            {suits.map(suit => (\n                <Foundation suit={suit} key={suit} />\n            ))}\n        </div>\n        <div className=\"columns\">\n            {board.columns.map((c, i) => <Column index={i} key={i}/>)}\n        </div>\n    </div>\n});\n\nconst Column = observer(({index}: {index: number}) => {\n    const board = game.board;\n    const column = board.columns[index];\n    const cardsUnder = column.slice(0, -1);\n    const lastCard = last(column) || null;\n    const canPlace = board.canPlaceColumns[index];\n    const canPlaceCls = canPlace ? 'can-place' : '';\n    return <div className={`column ${canPlaceCls}`} onClick={onClick}>\n        {cardsUnder.map(c => <CardComponent key={c.id} card={c} />)}\n        {lastCard && <CardComponent key={lastCard.id} card={lastCard}\n            onSelect={() => !canPlace && game.board.selectCard(lastCard)}\n            onDoubleClick={() => board.tryToMove(lastCard)}/>}\n    </div>\n\n    function onClick() {\n        canPlace && board.moveToColumn(index);\n    }\n});\nconst Foundation = observer(({suit}: {suit: Suit}) => {\n    const board = game.board;\n    const cards = board.foundation[suit];\n    const lastCard = last(cards);\n    const canPlace = !!game.board.canPlaceFoundation[suit];\n    const canPlaceCls = canPlace ? 'can-place' : '';\n    return <div className={`foundation ${canPlaceCls}`} onClick={() => board.moveToFoundation(suit)}>\n        {lastCard\n            ? <CardComponent card={lastCard} onSelect={() => !canPlace && game.board.selectCard(lastCard)}\n                onDoubleClick={() => board.tryToMove(lastCard)}/>\n            : <div className={`foundation-empty foundation-empty-${suitToColor(suit)}`}>\n                {suitToPic(suit)}\n            </div>\n        }\n    </div>\n})\nconst FreePlace = observer(({i}: {i: number}) => {\n    const board = game.board;\n    const card = board.freeplaces[i];\n    if (card != null) {\n        return <div className=\"free-place\">\n            <CardComponent onDoubleClick={() => board.tryToMove(card)} onSelect={board.selectCard} card={card} />\n        </div>\n    } else {\n        const canPlace = !!game.board.selectedCard ? 'can-place' : '';\n        return <div className={`free-place ${canPlace}`} onClick={() => board.moveToFreePlace(i)}>\n        </div>\n    }\n});\n","import React, { useEffect } from 'react';\nimport {BoardComponent} from './board';\nimport { Game } from '../state/game';\nimport { autorun } from 'mobx';\n\nexport const GameComponent = ({game}: {game: Game}) => {\n    useEffect(() => {\n        document.addEventListener('keydown', ctrlZ);\n        return () => document.removeEventListener('keydown', ctrlZ);\n    });\n    useEffect(() => {\n        return autorun(() => {\n            document.title = 'Freecell - Game #'+game.seed;\n        });\n    })\n    return <div>\n        <BoardComponent />\n    </div>\n\n    function ctrlZ(e: KeyboardEvent) {\n        if (e.key === 'z' && e.ctrlKey) {\n            game.board.rollback();\n        }\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport {GameComponent, Menu} from './components';\nimport {game} from './state';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Menu />\n            <GameComponent game={game} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}